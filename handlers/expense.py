from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot
from states import AddExpense
import asyncio
from database import Wallet
from keyboards import get_categories_keyboard, get_wallets_keyboard, get_confirm_keyboard, get_main_menu
from database import add_transaction, Category, add_category
from utils import delete_message_safe
import logging
import re

def register_expense_handlers(dp):
    @dp.message(lambda message: message.text == 'üí∏ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥')
    async def add_expense_start(message: types.Message, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        await state.set_state(AddExpense.amount)
        sent = await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.update_data(last_message_id=sent.message_id)
        await message.delete()

    @dp.message(AddExpense.amount)
    async def add_expense_amount(message: types.Message, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        try:
            amount = float(message.text)
            if amount <= 0:
                sent = await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            await state.update_data(amount=amount)
            await state.set_state(AddExpense.category)
            keyboard = await get_categories_keyboard('expense')
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_exp")])
            sent = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
            await state.update_data(last_message_id=sent.message_id)
        except ValueError:
            sent = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é —Å—É–º–º—É.")
            await state.update_data(last_message_id=sent.message_id)
        await message.delete()

    @dp.callback_query(lambda c: c.data.startswith('cat_expense_'), AddExpense.category)
    async def add_expense_category(callback: types.CallbackQuery, state: FSMContext):
        try:
            if not re.match(r'^cat_expense_[\w\s-]+$', callback.data):
                raise ValueError("Invalid callback data format")
            category = callback.data.split('_')[2]
            if not await Category.filter(name=category, kind__in=['expense', 'both']).exists():
                raise ValueError("Category does not exist")
            await state.update_data(category=category)
            await state.set_state(AddExpense.wallet)
            keyboard = await get_wallets_keyboard()
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_exp")])
            sent = await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)
            await state.update_data(last_message_id=sent.message_id)
            await callback.answer()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ add_expense_category: {e}")
            sent = await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await state.clear()
            await callback.answer()

    @dp.callback_query(lambda c: c.data == 'add_cat_expense', AddExpense.category)
    async def add_expense_add_category(callback: types.CallbackQuery, state: FSMContext):
        sent = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(AddExpense.add_new_cat_exp)
        await state.update_data(last_message_id=sent.message_id)
        await callback.answer()

    @dp.message(AddExpense.add_new_cat_exp)
    async def add_new_category_expense(message: types.Message, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        category_name = message.text.strip()
        if not category_name or len(category_name) > 50 or not re.match(r'^[\w\s-]+$', category_name):
            sent = await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            await state.update_data(last_message_id=sent.message_id)
            await message.delete()
            return
        try:
            if await add_category(category_name, 'üÜï', 'expense'):
                await state.update_data(category=category_name)
                await state.set_state(AddExpense.wallet)
                keyboard = await get_wallets_keyboard()
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_exp")])
                sent = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)
                await state.update_data(last_message_id=sent.message_id)
            else:
                sent = await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç (50). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                await state.update_data(last_message_id=sent.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ add_new_category_expense: {e}")
            sent = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await state.clear()
        await message.delete()

    @dp.callback_query(lambda c: c.data.startswith('wallet_'), AddExpense.wallet)
    async def add_expense_wallet(callback: types.CallbackQuery, state: FSMContext):
        try:
            if not re.match(r'^wallet_[\w\s-]+$', callback.data):
                raise ValueError("Invalid callback data format")
            wallet = callback.data.split('_')[1]
            if not await Wallet.filter(name=wallet).exists():
                raise ValueError("Wallet does not exist")
            await state.update_data(wallet=wallet)
            await state.set_state(AddExpense.confirm)
            data = await state.get_data()
            if 'category' not in data or 'amount' not in data:
                sent = await callback.message.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await state.clear()
                await callback.answer()
                return
            amount = data['amount']
            category = data['category']
            cat_obj = await Category.get_or_none(name=category)
            emoji = cat_obj.emoji if cat_obj else 'üÜï'
            text = f"‚úÖ {amount:.2f} ‚ÇΩ | {emoji} {category} | {wallet}"
            keyboard = get_confirm_keyboard('exp')
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_exp")])
            sent = await callback.message.edit_text(text, reply_markup=keyboard)
            await state.update_data(last_message_id=sent.message_id)
            await callback.answer()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ add_expense_wallet: {e}")
            sent = await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—à–µ–ª—å–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await state.clear()
            await callback.answer()

    @dp.callback_query(lambda c: c.data == 'confirm_exp')
    async def add_expense_confirm(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        if 'category' not in data or 'wallet' not in data or 'amount' not in data:
            sent = await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await state.clear()
            await callback.answer()
            return
        try:
            await add_transaction('expense', data['amount'], data['category'], data['wallet'])
            sent = await callback.message.edit_text("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")]
            ]))
            await state.update_data(last_message_id=sent.message_id)
            await asyncio.sleep(3)
            await delete_message_safe(bot, callback.message.chat.id, sent.message_id)
            await state.clear()
            sent = await bot.send_message(callback.message.chat.id, "üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ add_expense_confirm: {e}")
            sent = await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await state.clear()
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'change_exp')
    async def add_expense_change(callback: types.CallbackQuery, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, callback.message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        await state.set_state(AddExpense.amount)
        sent = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        await state.update_data(last_message_id=sent.message_id)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'back_exp')
    async def add_expense_back(callback: types.CallbackQuery, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, callback.message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        await state.clear()
        sent = await callback.message.edit_text("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
        await state.update_data(last_message_id=sent.message_id)
        await callback.answer()