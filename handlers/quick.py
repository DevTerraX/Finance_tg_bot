from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot
from database import add_transaction, Category, Wallet
from keyboards import get_main_menu
from utils import delete_message_safe
import logging
import re
import asyncio

def register_quick_handlers(dp):
    @dp.message(commands=['e'])
    async def quick_expense(message: types.Message, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        parts = message.text.split(maxsplit=3)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(parts) < 4:
            sent = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /e 500 –µ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–µ", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await message.delete()
            return
        try:
            amount = float(parts[1])
            if amount <= 0:
                sent = await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            category = parts[2].strip()
            wallet = parts[3].strip()
            if not re.match(r'^[\w\s-]+$', category) or len(category) > 50:
                sent = await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            if not re.match(r'^[\w\s-]+$', wallet) or len(wallet) > 50:
                sent = await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            cat_exists = await Category.filter(name=category, kind__in=['expense', 'both']).exists()
            if not cat_exists:
                sent = await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            wallet_exists = await Wallet.filter(name=wallet).exists()
            if not wallet_exists:
                sent = await message.answer(f"–ö–æ—à–µ–ª–µ–∫ '{wallet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            await add_transaction('expense', amount, category, wallet)
            logging.info(f"Quick expense added: amount={amount}, category={category}, wallet={wallet}, chat_id={message.chat.id}")
            sent = await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±—ã—Å—Ç—Ä–æ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")]
            ]))
            await state.update_data(last_message_id=sent.message_id)
            await asyncio.sleep(3)
            await delete_message_safe(bot, message.chat.id, sent.message_id)
            sent = await message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        except ValueError:
            sent = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü—Ä–∏–º–µ—Ä: /e 500 –µ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–µ", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ quick_expense: {e}")
            sent = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        await message.delete()

    @dp.message(commands=['i'])
    async def quick_income(message: types.Message, state: FSMContext):
        last_msg_id = (await state.get_data()).get('last_message_id')
        if last_msg_id:
            await delete_message_safe(bot, message.chat.id, last_msg_id)
        await state.update_data(last_message_id=None)
        parts = message.text.split(maxsplit=3)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(parts) < 4:
            sent = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /i 1000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
            await message.delete()
            return
        try:
            amount = float(parts[1])
            if amount <= 0:
                sent = await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            source = parts[2].strip()
            wallet = parts[3].strip()
            if not re.match(r'^[\w\s-]+$', source) or len(source) > 50:
                sent = await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            if not re.match(r'^[\w\s-]+$', wallet) or len(wallet) > 50:
                sent = await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            source_exists = await Category.filter(name=source, kind__in=['income', 'both']).exists()
            if not source_exists:
                sent = await message.answer(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            wallet_exists = await Wallet.filter(name=wallet).exists()
            if not wallet_exists:
                sent = await message.answer(f"–ö–æ—à–µ–ª–µ–∫ '{wallet}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
                await state.update_data(last_message_id=sent.message_id)
                await message.delete()
                return
            await add_transaction('income', amount, source, wallet)
            logging.info(f"Quick income added: amount={amount}, source={source}, wallet={wallet}, chat_id={message.chat.id}")
            sent = await message.answer("‚úÖ –î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±—ã—Å—Ç—Ä–æ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")]
            ]))
            await state.update_data(last_message_id=sent.message_id)
            await asyncio.sleep(3)
            await delete_message_safe(bot, message.chat.id, sent.message_id)
            sent = await message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        except ValueError:
            sent = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü—Ä–∏–º–µ—Ä: /i 1000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ quick_income: {e}")
            sent = await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
            await state.update_data(last_message_id=sent.message_id)
        await message.delete()