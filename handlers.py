import asyncio
import datetime
import io
import logging
import pandas as pd
import matplotlib.pyplot as plt
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from database import conn, cursor, init_db, add_transaction, get_balance, get_summary, get_category_summary, get_wallet_summary, add_wallet, delete_wallet, add_category, delete_category, set_reminder_time, set_pin, get_pin, add_goal, get_goals
from states import AddExpense, AddIncome, Settings, PinCheck
from keyboards import get_main_menu, get_summaries_keyboard, get_settings_keyboard, get_categories_keyboard, get_wallets_keyboard, get_confirm_keyboard, get_manage_keyboard
from bot import bot

logging.basicConfig(level=logging.INFO)

scheduler = AsyncIOScheduler()

async def send_reminder(chat_id):
    await bot.send_message(chat_id, "–ù–µ –∑–∞–±—É–¥—å –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥—ã!", reply_markup=get_main_menu())

def setup_reminders():
    cursor.execute("SELECT reminder_time, chat_id FROM settings WHERE id=1")
    result = cursor.fetchone()
    if result and result[1]:
        reminder_time, chat_id = result
        try:
            hour, minute = map(int, reminder_time.split(':'))
            scheduler.add_job(send_reminder, 'cron', hour=hour, minute=minute, args=(chat_id,))
        except ValueError:
            logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

def register_handlers(dp):
    @dp.message(Command('start'))
    async def start(message: types.Message):
        cursor.execute("UPDATE settings SET chat_id=? WHERE id=1", (message.chat.id,))
        conn.commit()
        await message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
        scheduler.start()
        setup_reminders()

    @dp.message(Command('getid'))
    async def get_chat_id(message: types.Message):
        await message.answer(f"–í–∞—à chat_id: {message.chat.id}")

    @dp.message(lambda message: message.text == 'üí∞ –ë–∞–ª–∞–Ω—Å')
    async def balance(message: types.Message):
        total_balance = get_balance()
        await message.answer(f"üìà –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} ‚ÇΩ", reply_markup=get_main_menu())

    @dp.message(lambda message: message.text == 'üí∏ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥')
    async def add_expense_start(message: types.Message, state: FSMContext):
        await state.set_state(AddExpense.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())

    @dp.message(AddExpense.amount)
    async def add_expense_amount(message: types.Message, state: FSMContext):
        try:
            amount = float(message.text)
            await state.update_data(amount=amount)
            await state.set_state(AddExpense.category)
            keyboard = get_categories_keyboard('expense')
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é —Å—É–º–º—É.")

    @dp.callback_query(lambda c: c.data.startswith('cat_expense_'), StateFilter(AddExpense.category))
    async def add_expense_category(callback: types.CallbackQuery, state: FSMContext):
        category = callback.data.split('_')[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–¥–∞")
        await state.update_data(category=category)
        await state.set_state(AddExpense.wallet)
        keyboard = get_wallets_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'add_cat_expense', StateFilter(AddExpense.category))
    async def add_expense_add_category(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(AddExpense.add_new_cat_exp)
        await callback.answer()

    @dp.message(StateFilter(AddExpense.add_new_cat_exp))
    async def add_new_category_expense(message: types.Message, state: FSMContext):
        category_name = message.text.strip()
        if not category_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if add_category(category_name, 'üÜï', 'expense'):
            await state.update_data(category=category_name)
            await state.set_state(AddExpense.wallet)
            keyboard = get_wallets_keyboard()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)
        else:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

    @dp.callback_query(lambda c: c.data.startswith('wallet_'), StateFilter(AddExpense.wallet))
    async def add_expense_wallet(callback: types.CallbackQuery, state: FSMContext):
        wallet = callback.data.split('_')[1]
        await state.update_data(wallet=wallet)
        await state.set_state(AddExpense.confirm)
        data = await state.get_data()
        amount = data['amount']
        category = data['category']
        cursor.execute("SELECT emoji FROM categories WHERE name=?", (category,))
        emoji_result = cursor.fetchone()
        emoji = emoji_result[0] if emoji_result else 'üÜï'
        text = f"‚úÖ {amount} ‚ÇΩ | {emoji} {category} | {wallet}"
        keyboard = get_confirm_keyboard('exp')
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'confirm_exp')
    async def add_expense_confirm(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        add_transaction('expense', data['amount'], data['category'], data['wallet'])
        await callback.message.edit_text("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await asyncio.sleep(3)
        await callback.message.delete()
        await state.clear()
        await callback.message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())

    @dp.callback_query(lambda c: c.data == 'change_exp')
    async def add_expense_change(callback: types.CallbackQuery, state: FSMContext):
        await state.set_state(AddExpense.amount)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'back_exp')
    async def add_expense_back(callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
        await callback.answer()

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ (–¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –∫–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Ä–∞—Å—Ö–æ–¥–∞–º, —Å –∑–∞–º–µ–Ω–æ–π 'expense' –Ω–∞ 'income', 'category' –Ω–∞ 'source')
    @dp.message(lambda message: message.text == 'üíµ –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥')
    async def add_income_start(message: types.Message, state: FSMContext):
        await state.set_state(AddIncome.amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())

    @dp.message(AddIncome.amount)
    async def add_income_amount(message: types.Message, state: FSMContext):
        try:
            amount = float(message.text)
            await state.update_data(amount=amount)
            await state.set_state(AddIncome.source)
            keyboard = get_categories_keyboard('income')
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", reply_markup=keyboard)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—É—é —Å—É–º–º—É.")

    @dp.callback_query(lambda c: c.data.startswith('cat_income_'), StateFilter(AddIncome.source))
    async def add_income_source(callback: types.CallbackQuery, state: FSMContext):
        source = callback.data.split('_')[2]
        await state.update_data(source=source)
        await state.set_state(AddIncome.wallet)
        keyboard = get_wallets_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'add_cat_income', StateFilter(AddIncome.source))
    async def add_income_add_category(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")
        await state.set_state(AddIncome.add_new_cat_inc)
        await callback.answer()

    @dp.message(StateFilter(AddIncome.add_new_cat_inc))
    async def add_new_category_income(message: types.Message, state: FSMContext):
        source_name = message.text.strip()
        if not source_name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        if add_category(source_name, 'üÜï', 'income'):
            await state.update_data(source=source_name)
            await state.set_state(AddIncome.wallet)
            keyboard = get_wallets_keyboard()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)
        else:
            await message.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

    @dp.callback_query(lambda c: c.data.startswith('wallet_'), StateFilter(AddIncome.wallet))
    async def add_income_wallet(callback: types.CallbackQuery, state: FSMContext):
        wallet = callback.data.split('_')[1]
        await state.update_data(wallet=wallet)
        await state.set_state(AddIncome.confirm)
        data = await state.get_data()
        amount = data['amount']
        source = data['source']
        cursor.execute("SELECT emoji FROM categories WHERE name=?", (source,))
        emoji_result = cursor.fetchone()
        emoji = emoji_result[0] if emoji_result else 'üÜï'
        text = f"‚úÖ {amount} ‚ÇΩ | {emoji} {source} | {wallet}"
        keyboard = get_confirm_keyboard('inc')
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'confirm_inc')
    async def add_income_confirm(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        add_transaction('income', data['amount'], data['source'], data['wallet'])
        await callback.message.edit_text("‚úÖ –î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await asyncio.sleep(3)
        await callback.message.delete()
        await state.clear()
        await callback.message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())

    @dp.callback_query(lambda c: c.data == 'change_inc')
    async def add_income_change(callback: types.CallbackQuery, state: FSMContext):
        await state.set_state(AddIncome.amount)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
        await callback.answer()

    @dp.callback_query(lambda c: c.data == 'back_inc')
    async def add_income_back(callback: types.CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())
        await callback.answer()

    @dp.message(lambda message: message.text == 'üìä –ò—Ç–æ–≥–∏')
    async def summaries(message: types.Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –æ–ø—Ü–∏—é:", reply_markup=get_summaries_keyboard())

    @dp.message(lambda message: message.text in ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÜ –ù–µ–¥–µ–ª—è', 'üìà –ú–µ—Å—è—Ü'])
    async def show_summary(message: types.Message):
        period_map = {'üìÖ –°–µ–≥–æ–¥–Ω—è': 'day', 'üìÜ –ù–µ–¥–µ–ª—è': 'week', 'üìà –ú–µ—Å—è—Ü': 'month'}
        period = period_map[message.text]
        expenses, incomes = get_summary(period)
        total_income = sum(amt for _, amt in incomes) if incomes else 0
        total_expense = sum(amt for _, amt in expenses) if expenses else 0
        balance = total_income - total_expense
        text = f"üìä –ò—Ç–æ–≥ –∑–∞ {period}:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüí∏ –†–∞—Å—Ö–æ–¥—ã:\n"
        if not expenses:
            text += "- –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
        for cat, amt in expenses:
            cursor.execute("SELECT emoji FROM categories WHERE name=?", (cat,))
            emoji_result = cursor.fetchone()
            emoji = emoji_result[0] if emoji_result else 'üÜï'
            text += f"- {emoji} {cat}: {amt} ‚ÇΩ\n"
        text += "\nüí∞ –î–æ—Ö–æ–¥—ã:\n"
        if not incomes:
            text += "- –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤\n"
        for cat, amt in incomes:
            cursor.execute("SELECT emoji FROM categories WHERE name=?", (cat,))
            emoji_result = cursor.fetchone()
            emoji = emoji_result[0] if emoji_result else 'üÜï'
            text += f"- {emoji} {cat}: {amt} ‚ÇΩ\n"
        text += f"\nüìà –ë–∞–ª–∞–Ω—Å: {balance:+} ‚ÇΩ"
        await message.answer(text, reply_markup=get_main_menu())

    @dp.message(lambda message: message.text == 'üîé –ò—Ç–æ–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    async def category_summary(message: types.Message):
        keyboard = get_categories_keyboard('both')
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith('cat_both_'), StateFilter(None))
    async def show_category_summary(callback: types.CallbackQuery):
        category = callback.data.split('_')[2]
        data = get_category_summary(category)
        if not data:
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            await callback.answer()
            return
        text = f"–ò—Ç–æ–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:\n"
        for type_, amt in data:
            text += f"{type_.capitalize()}: {amt} ‚ÇΩ\n"
        await callback.message.edit_text(text)
        await callback.answer()

    @dp.message(lambda message: message.text == 'üí≥ –ò—Ç–æ–≥ –ø–æ –∫–æ—à–µ–ª—å–∫—É')
    async def wallet_summary(message: types.Message):
        keyboard = get_wallets_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith('wallet_'), StateFilter(None))
    async def show_wallet_summary(callback: types.CallbackQuery):
        wallet = callback.data.split('_')[1]
        data = get_wallet_summary(wallet)
        if not data:
            await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.")
            await callback.answer()
            return
        text = f"–ò—Ç–æ–≥ –ø–æ –∫–æ—à–µ–ª—å–∫—É {wallet}:\n"
        for type_, amt in data:
            text += f"{type_.capitalize()}: {amt} ‚ÇΩ\n"
        await callback.message.edit_text(text)
        await callback.answer()

    @dp.message(lambda message: message.text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV')
    async def export_csv(message: types.Message):
        cursor.execute("SELECT * FROM transactions")
        data = cursor.fetchall()
        if not data:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        df = pd.DataFrame(data, columns=['id', 'type', 'amount', 'category', 'wallet', 'note', 'date'])
        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False)
        csv_buffer.seek(0)
        await bot.send_document(message.chat.id, types.InputFile(io.BytesIO(csv_buffer.getvalue().encode()), filename='transactions.csv'))
        await message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())

    @dp.message(lambda message: message.text == 'üìä –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞')
    async def pie_chart(message: types.Message):
        cursor.execute("SELECT category, SUM(amount) FROM transactions WHERE type='expense' GROUP BY category")
        data = cursor.fetchall()
        if not data:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã.", reply_markup=get_main_menu())
            return
        labels = [row[0] for row in data]
        sizes = [row[1] for row in data]
        fig, ax = plt.subplots()
        ax.pie(sizes, labels=labels, autopct='%1.1f%%')
        ax.axis('equal')
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        await bot.send_photo(message.chat.id, photo=buf)
        buf.close()
        plt.close()
        await message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())

    @dp.message(lambda message: message.text == '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    async def settings(message: types.Message, state: FSMContext):
        pin = get_pin()
        if pin:
            await state.set_state(PinCheck.pin)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ PIN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:")
        else:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_keyboard())

    @dp.message(StateFilter(PinCheck.pin))
    async def check_pin(message: types.Message, state: FSMContext):
        input_pin = message.text.strip()
        pin = get_pin()
        if input_pin == pin:
            await state.clear()
            await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_keyboard())
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π PIN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

    @dp.message(lambda message: message.text == 'üëú –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏')
    async def manage_wallets(message: types.Message):
        keyboard = get_manage_keyboard('wallet')
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data == 'add_wallet')
    async def add_wallet_start(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")
        await state.set_state(Settings.wallet_add)
        await callback.answer()

    @dp.message(StateFilter(Settings.wallet_add))
    async def add_wallet_finish(message: types.Message, state: FSMContext):
        name = message.text.strip()
        if add_wallet(name):
            await message.answer("–ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_settings_keyboard())
        else:
            await message.answer("–ö–æ—à–µ–ª–µ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()

    @dp.callback_query(lambda c: c.data == 'delete_wallet')
    async def delete_wallet_start(callback: types.CallbackQuery, state: FSMContext):
        keyboard = get_wallets_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(Settings.wallet_delete)
        await callback.answer()

    @dp.callback_query(StateFilter(Settings.wallet_delete), lambda c: c.data.startswith('wallet_'))
    async def delete_wallet_finish(callback: types.CallbackQuery, state: FSMContext):
        name = callback.data.split('_')[1]
        delete_wallet(name)
        await callback.message.edit_text("–ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω!")
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_keyboard())

    @dp.message(lambda message: message.text == 'üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏')
    async def manage_categories(message: types.Message):
        keyboard = get_manage_keyboard('category')
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data == 'add_category')
    async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(Settings.category_add)
        await callback.answer()

    @dp.message(StateFilter(Settings.category_add))
    async def add_category_finish(message: types.Message, state: FSMContext):
        name = message.text.strip()
        kind = 'both'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if add_category(name, 'üÜï', kind):
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_settings_keyboard())
        else:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.clear()

    @dp.callback_query(lambda c: c.data == 'delete_category')
    async def delete_category_start(callback: types.CallbackQuery, state: FSMContext):
        keyboard = get_categories_keyboard('both')
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(Settings.category_delete)
        await callback.answer()

    @dp.callback_query(StateFilter(Settings.category_delete), lambda c: c.data.startswith('cat_both_'))
    async def delete_category_finish(callback: types.CallbackQuery, state: FSMContext):
        name = callback.data.split('_')[2]
        delete_category(name)
        await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!")
        await state.clear()
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=get_settings_keyboard())

    @dp.message(lambda message: message.text == 'üéØ –¶–µ–ª–∏ –∏ –ª–∏–º–∏—Ç—ã')
    async def manage_goals(message: types.Message):
        goals = get_goals()
        text = "–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n"
        if not goals:
            text += "- –ù–µ—Ç —Ü–µ–ª–µ–π\n"
        for goal in goals:
            text += f"{goal[1]}: {goal[3]}/{goal[2]} ‚ÇΩ (—Ç–µ–∫—É—â–∏–π: {goal[3]})\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")]
        ])
        await message.answer(text, reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data == 'add_goal')
    async def add_goal_start(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Ç–ø—É—Å–∫ 100000):")
        await state.set_state(Settings.goal_set)
        await callback.answer()

    @dp.message(StateFilter(Settings.goal_set))
    async def add_goal_finish(message: types.Message, state: FSMContext):
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –û—Ç–ø—É—Å–∫ 100000")
            return
        description = ' '.join(parts[:-1])
        try:
            target = float(parts[-1])
            add_goal(description, target)
            await message.answer("–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_settings_keyboard())
            await state.clear()
        except ValueError:
            await message.answer("–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    @dp.message(lambda message: message.text == '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    async def set_reminder(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (HH:MM):")
        await state.set_state(Settings.reminder_set)

    @dp.message(StateFilter(Settings.reminder_set))
    async def set_reminder_finish(message: types.Message, state: FSMContext):
        time_ = message.text.strip()
        try:
            hour, minute = map(int, time_.split(':'))
            if 0 <= hour < 24 and 0 <= minute < 60:
                set_reminder_time(time_)
                scheduler.remove_all_jobs()
                setup_reminders()
                await message.answer("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_settings_keyboard())
                await state.clear()
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00).")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 22:00")

    @dp.message(lambda message: message.text == 'üîë PIN-–∫–æ–¥')
    async def set_pin_handler(message: types.Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π PIN-–∫–æ–¥ (4 —Ü–∏—Ñ—Ä—ã, –∏–ª–∏ –ø—É—Å—Ç–æ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è):")
        await state.set_state(Settings.pin_set)

    @dp.message(StateFilter(Settings.pin_set))
    async def set_pin_finish(message: types.Message, state: FSMContext):
        pin = message.text.strip() or None
        if pin and (not pin.isdigit() or len(pin) != 4):
            await message.answer("PIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        set_pin(pin)
        text = "PIN-–∫–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω." if not pin else "PIN-–∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        await message.answer(text, reply_markup=get_settings_keyboard())
        await state.clear()

    @dp.message(lambda message: message.text == 'üíæ –≠–∫—Å–ø–æ—Ä—Ç / –±—ç–∫–∞–ø –ë–î')
    async def backup_db(message: types.Message):
        with open('finance_bot.db', 'rb') as db_file:
            await bot.send_document(message.chat.id, types.InputFile(db_file, filename='finance_bot_backup.db'))
        await message.answer("–ë—ç–∫–∞–ø –ë–î –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=get_settings_keyboard())

    @dp.message(lambda message: message.text == '–ù–∞–∑–∞–¥')
    async def back_to_main(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("üíº –¢—ã –≤ —Å–≤–æ—ë–º –∫–æ—à–µ–ª—å–∫–µ", reply_markup=get_main_menu())

    @dp.message(Command('e'))
    async def quick_expense(message: types.Message):
        parts = message.text.split()[1:]
        if len(parts) >= 3:
            try:
                amount = float(parts[0])
                category = parts[1]
                wallet = ' '.join(parts[2:])
                cursor.execute("SELECT 1 FROM categories WHERE name=? AND kind IN ('expense', 'both')", (category,))
                if not cursor.fetchone():
                    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_menu())
                    return
                cursor.execute("SELECT 1 FROM wallets WHERE name=?", (wallet,))
                if not cursor.fetchone():
                    await message.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
                    return
                add_transaction('expense', amount, category, wallet)
                await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±—ã—Å—Ç—Ä–æ!", reply_markup=get_main_menu())
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /e 500 –µ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–µ", reply_markup=get_main_menu())
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /e 500 –µ–¥–∞ –Ω–∞–ª–∏—á–Ω—ã–µ", reply_markup=get_main_menu())

    @dp.message(Command('i'))
    async def quick_income(message: types.Message):
        parts = message.text.split()[1:]
        if len(parts) >= 3:
            try:
                amount = float(parts[0])
                source = parts[1]
                wallet = ' '.join(parts[2:])
                cursor.execute("SELECT 1 FROM categories WHERE name=? AND kind IN ('income', 'both')", (source,))
                if not cursor.fetchone():
                    await message.answer("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
                    return
                cursor.execute("SELECT 1 FROM wallets WHERE name=?", (wallet,))
                if not cursor.fetchone():
                    await message.answer("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())
                    return
                add_transaction('income', amount, source, wallet)
                await message.answer("‚úÖ –î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±—ã—Å—Ç—Ä–æ!", reply_markup=get_main_menu())
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /i 2000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞", reply_markup=get_main_menu())
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /i 2000 –∑–∞—Ä–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞", reply_markup=get_main_menu())