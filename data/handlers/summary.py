from __future__ import annotations

from datetime import datetime, timedelta

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from ..utils.db_utils import get_or_create_user, get_summary
from ..utils.cleanup import clean_chat
from ..utils.charts import generate_pie_chart
from ..utils.csv_export import export_transactions_to_csv
from ..utils.analytics import (
    get_top_categories,
    get_average_daily_expense,
    get_income_expense_dynamics
)
from ..utils.storage import ensure_user_dirs
from ..keyboards.main_menu import get_main_menu, get_back_keyboard, SUMMARY_BUTTON, BACK_BUTTON
from ..keyboards.summary import (
    get_summary_menu,
    get_period_mode_keyboard,
    get_chart_period_keyboard,
    SUMMARY_OVERVIEW_BUTTON,
    SUMMARY_CSV_BUTTON,
    SUMMARY_CHART_BUTTON,
    SUMMARY_TOP_BUTTON,
    SUMMARY_AVG_BUTTON,
    SUMMARY_DYNAMICS_BUTTON,
    SUMMARY_PERIOD_BUTTON,
    SUMMARY_BACK_BUTTON
)
from ..states.summary_states import SummaryStates


async def show_summary_menu(message: types.Message, state: FSMContext):
    await state.finish()
    user = await get_or_create_user(message.from_user.id, message.from_user.full_name)
    ensure_user_dirs(user.id)
    await message.answer("üìä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä! –í—ã–±–∏—Ä–∞–π, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º.", reply_markup=get_summary_menu())


async def summary_text_handler(message: types.Message, state: FSMContext):
    user = await get_or_create_user(message.from_user.id, message.from_user.full_name)
    text = message.text
    last_message: types.Message | None = None

    if text == SUMMARY_OVERVIEW_BUTTON:
        summary_data = await get_summary(user)
        response = (
            f"üíº –ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: {summary_data['balance']:.2f} {user.currency}\n"
            f"üíµ –î–æ—Ö–æ–¥–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: {summary_data['income']:.2f} {user.currency}\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥–æ–≤ —É—á—Ç–µ–Ω–æ: {summary_data['expense']:.2f} {user.currency}"
        )
        last_message = await message.answer(response, reply_markup=get_summary_menu())
    elif text == SUMMARY_CSV_BUTTON:
        path = await export_transactions_to_csv(user, timedelta(hours=24))
        if path:
            with open(path, 'rb') as file:
                await message.answer_document(file, caption="üì• –í–æ—Ç —Å–≤–µ–∂–∏–π CSV –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
            last_message = await message.answer("üßæ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ –ª—é–±–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.", reply_markup=get_summary_menu())
        else:
            last_message = await message.answer("‚ÑπÔ∏è –ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ.", reply_markup=get_summary_menu())
    elif text == SUMMARY_CHART_BUTTON:
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤:",
            reply_markup=get_chart_period_keyboard()
        )
    elif text == SUMMARY_TOP_BUTTON:
        top_categories = await get_top_categories(user, days=30)
        if not top_categories:
            last_message = await message.answer("üî• –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è!", reply_markup=get_summary_menu())
        else:
            lines = [
                f"{idx}. {name}: {amount:.2f} {user.currency}"
                for idx, (name, amount) in enumerate(top_categories, start=1)
            ]
            leaderboard = "\n".join(lines)
            last_message = await message.answer("üî• –¢–æ–ø —Ç—Ä–∞—Ç –∑–∞ 30 –¥–Ω–µ–π:\n" + leaderboard, reply_markup=get_summary_menu())
    elif text == SUMMARY_AVG_BUTTON:
        avg = await get_average_daily_expense(user, days=7)
        if avg is None:
            last_message = await message.answer("üìâ –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=get_summary_menu())
        else:
            last_message = await message.answer(
                f"üìâ –°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ 7 –¥–Ω–µ–π: {avg:.2f} {user.currency}",
                reply_markup=get_summary_menu()
            )
    elif text == SUMMARY_DYNAMICS_BUTTON:
        stats = await get_income_expense_dynamics(user, days=7)
        msg = (
            "üìÜ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π:\n"
            f"üíµ –î–æ—Ö–æ–¥—ã: {stats['current_income']:.2f} {user.currency} ({stats['income_change']:+.2f} {user.currency})\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {stats['current_expense']:.2f} {user.currency} ({stats['expense_change']:+.2f} {user.currency})"
        )
        last_message = await message.answer(msg, reply_markup=get_summary_menu())
    elif text == SUMMARY_PERIOD_BUTTON:
        await SummaryStates.period_mode.set()
        await message.answer(
            "üóìÔ∏è –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞.",
            reply_markup=get_back_keyboard()
        )
        await message.answer(
            "‚ú® –ù–∞–∂–º–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=get_period_mode_keyboard()
        )
    elif text == SUMMARY_BACK_BUTTON:
        await state.finish()
        last_message = await message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    else:
        last_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=get_summary_menu())

    if last_message and user.clean_chat:
        await clean_chat(message.bot, message.chat.id, last_message.message_id)


async def summary_period_mode_callback(query: types.CallbackQuery, state: FSMContext):
    user = await get_or_create_user(query.from_user.id, query.from_user.full_name)
    data = query.data
    if data == "period_day":
        await SummaryStates.period_input.set()
        await state.update_data(period_mode='day')
        await query.message.edit_text(
            "üóìÔ∏è –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2024).",
        )
    elif data == "period_range":
        await SummaryStates.period_input.set()
        await state.update_data(period_mode='range')
        await query.message.edit_text(
            "üóÇÔ∏è –í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì‚Äì–î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.12.2024‚Äì07.12.2024).",
        )
    elif data == "period_back":
        await state.finish()
        await query.message.edit_text("‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        reply = await query.message.answer("üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.", reply_markup=get_summary_menu())
        if user.clean_chat:
            await clean_chat(query.bot, query.message.chat.id, reply.message_id)
    await query.answer()


async def summary_period_input(message: types.Message, state: FSMContext):
    if message.text == BACK_BUTTON:
        await state.finish()
        reply = await message.answer("üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –æ—Ç—á—ë—Ç–æ–≤.", reply_markup=get_summary_menu())
        user_profile = await get_or_create_user(message.from_user.id, message.from_user.full_name)
        if user_profile.clean_chat:
            await clean_chat(message.bot, message.chat.id, reply.message_id)
        return

    data = await state.get_data()
    mode = data.get('period_mode')
    user = await get_or_create_user(message.from_user.id, message.from_user.full_name)
    try:
        if mode == 'day':
            start, end = _parse_single_day(message.text)
        elif mode == 'range':
            start, end = _parse_range(message.text)
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            reply_markup=get_back_keyboard()
        )
        return

    summary_data = await get_summary(user, start=start, end=end)
    display_end = end - timedelta(days=1)
    if not summary_data['incomes'] and not summary_data['expenses']:
        reply = await message.answer("üì≠ –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_summary_menu())
    else:
        text = (
            f"üìÜ –°–≤–æ–¥–∫–∞ –∑–∞ {start:%d.%m.%Y} ‚Äì {display_end:%d.%m.%Y}:\n"
            f"üíµ –î–æ—Ö–æ–¥—ã: {summary_data['income']:.2f} {user.currency}\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {summary_data['expense']:.2f} {user.currency}\n"
            f"üíº –ë–∞–ª–∞–Ω—Å: {summary_data['balance']:.2f} {user.currency}"
        )
        reply = await message.answer(text, reply_markup=get_summary_menu())

    await state.finish()
    if user.clean_chat:
        await clean_chat(message.bot, message.chat.id, reply.message_id)


async def summary_chart_callback(query: types.CallbackQuery):
    data = query.data
    user = await get_or_create_user(query.from_user.id, query.from_user.full_name)

    if data == "chart_back":
        await query.message.edit_text("–î–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        reply = await query.message.answer("üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–ø—Ü–∏–π.", reply_markup=get_summary_menu())
        if user.clean_chat:
            await clean_chat(query.bot, query.message.chat.id, reply.message_id)
        await query.answer()
        return

    days = 7 if data == "chart_week" else 30
    end = datetime.now()
    start = end - timedelta(days=days)
    summary_data = await get_summary(user, start=start, end=end)

    expenses = summary_data['expenses']
    if not expenses:
        reply = await query.message.answer("üì≠ –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_summary_menu())
        if user.clean_chat:
            await clean_chat(query.bot, query.message.chat.id, reply.message_id)
        await query.answer()
        return

    exp_data: dict[str, float] = {}
    for tx in expenses:
        cat = tx.category_name or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        exp_data[cat] = exp_data.get(cat, 0.0) + tx.amount

    path = generate_pie_chart(exp_data, f"–†–∞—Å—Ö–æ–¥—ã_{days}_–¥–Ω–µ–π", user.id)
    if path:
        with open(path, 'rb') as photo:
            await query.message.answer_photo(photo, caption=f"üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π")
    reply = await query.message.answer("–ì–æ—Ç–æ–≤–æ! –í—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç.", reply_markup=get_summary_menu())
    if user.clean_chat:
        await clean_chat(query.bot, query.message.chat.id, reply.message_id)
    await query.answer()


def _parse_single_day(text: str) -> tuple[datetime, datetime]:
    date_obj = datetime.strptime(text.strip(), "%d.%m.%Y")
    start = date_obj.replace(hour=0, minute=0, second=0, microsecond=0)
    end = start + timedelta(days=1)
    return start, end


def _parse_range(text: str) -> tuple[datetime, datetime]:
    normalized = text.replace('‚Äì', '-').replace('‚Äî', '-')
    parts = normalized.split('-')
    if len(parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    start = datetime.strptime(parts[0].strip(), "%d.%m.%Y")
    end = datetime.strptime(parts[1].strip(), "%d.%m.%Y") + timedelta(days=1)
    return start, end


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(show_summary_menu, lambda m: m.text == SUMMARY_BUTTON, state="*")
    dp.register_message_handler(
        summary_text_handler,
        lambda m: m.text in {
            SUMMARY_OVERVIEW_BUTTON,
            SUMMARY_CSV_BUTTON,
            SUMMARY_CHART_BUTTON,
            SUMMARY_TOP_BUTTON,
            SUMMARY_AVG_BUTTON,
            SUMMARY_DYNAMICS_BUTTON,
            SUMMARY_PERIOD_BUTTON,
            SUMMARY_BACK_BUTTON
        },
        state="*"
    )
    dp.register_callback_query_handler(summary_period_mode_callback, lambda c: c.data.startswith("period_"), state=SummaryStates.period_mode)
    dp.register_message_handler(summary_period_input, state=SummaryStates.period_input)
    dp.register_callback_query_handler(summary_chart_callback, lambda c: c.data.startswith("chart_"), state="*")
