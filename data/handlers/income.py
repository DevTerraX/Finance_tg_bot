from __future__ import annotations

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from ..utils.db_utils import (
    get_or_create_user,
    get_categories,
    create_category,
    create_transaction
)
from ..utils.validation import validate_amount
from ..utils.cleanup import clean_chat
from ..keyboards.category import get_categories_keyboard
from ..keyboards.confirmation import get_confirmation_keyboard, get_edit_keyboard
from ..keyboards.main_menu import (
    get_main_menu,
    get_back_keyboard,
    BACK_BUTTON,
    INCOME_BUTTON
)
from ..states.income_states import IncomeStates
from ..models.category import Category


async def start_income(message: types.Message, state: FSMContext):
    await state.finish()
    user = await get_or_create_user(message.from_user.id, message.from_user.full_name)
    await IncomeStates.sum.set()
    await state.update_data(user_id=user.id)
    await message.answer("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 987.65):", reply_markup=get_back_keyboard())


async def income_sum(message: types.Message, state: FSMContext):
    user = await get_or_create_user(message.from_user.id, message.from_user.full_name)
    if message.text == BACK_BUTTON:
        await state.finish()
        reply = await message.answer("üîô –•–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        if user.clean_chat:
            await clean_chat(message.bot, message.chat.id, reply.message_id)
        return
    try:
        amount = validate_amount(message.text)
    except ValueError as exc:
        await message.answer(f"‚ö†Ô∏è {exc} –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=get_back_keyboard())
        return

    await state.update_data(amount=amount)
    await IncomeStates.category.set()
    categories = await get_categories(user, 'income')
    keyboard = get_categories_keyboard(categories, type='income')
    await message.answer("üè∑Ô∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ—Ö–æ–¥–∞:", reply_markup=keyboard)


async def income_category_callback(query: types.CallbackQuery, state: FSMContext):
    user = await get_or_create_user(query.from_user.id, query.from_user.full_name)
    data = query.data
    if data.startswith('select_category_'):
        cat_id = int(data.split('_')[-1])
        category = await Category.get(id=cat_id)
        await state.update_data(category_id=cat_id, category_name=category.name)
        await IncomeStates.confirm.set()
        state_data = await state.get_data()
        amount = state_data['amount']
        await query.message.edit_text(
            f"‚ú® –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–º –¥–æ—Ö–æ–¥?\n"
            f"üíµ –°—É–º–º–∞: {amount:.2f}\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}",
            reply_markup=get_confirmation_keyboard(is_expense=False)
        )
    elif data == 'create_category':
        await IncomeStates.category.set()
        await query.message.delete()
        await query.message.answer("üÜï –ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤?", reply_markup=get_back_keyboard())
    elif data == 'back':
        await state.finish()
        await query.message.delete()
        reply = await query.message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        if user.clean_chat:
            await clean_chat(query.bot, query.message.chat.id, reply.message_id)


async def income_create_category(message: types.Message, state: FSMContext):
    user = await get_or_create_user(message.from_user.id, message.from_user.full_name)
    if message.text == BACK_BUTTON:
        await state.finish()
        reply = await message.answer("üîô –ì–æ—Ç–æ–≤–æ, –≤–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        if user.clean_chat:
            await clean_chat(message.bot, message.chat.id, reply.message_id)
        return

    name = message.text.strip()
    category = await create_category(user, name, 'income')
    await state.update_data(category_id=category.id, category_name=category.name)
    await IncomeStates.confirm.set()
    state_data = await state.get_data()
    await message.answer(
        f"üåü –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' –≥–æ—Ç–æ–≤–∞!\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –¥–æ—Ö–æ–¥ –Ω–∞ {state_data['amount']:.2f} {user.currency}.",
        reply_markup=get_confirmation_keyboard(is_expense=False)
    )


async def income_confirm_callback(query: types.CallbackQuery, state: FSMContext):
    data = query.data
    user = await get_or_create_user(query.from_user.id, query.from_user.full_name)
    state_data = await state.get_data()

    if data == 'confirm':
        tx = await create_transaction(
            user,
            state_data['amount'],
            state_data['category_id'],
            'income'
        )
        await state.finish()
        await query.message.edit_text("‚úÖ –î–æ—Ö–æ–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!")
        summary_text = (
            f"üí∞ –ü–æ—Å—Ç—É–ø–∏–ª–æ: {tx.amount:.2f} {user.currency} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {tx.category_name}.\n"
            f"üíº –ë–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å: {user.balance:.2f} {user.currency}"
        )
        reply = await query.message.answer(summary_text, reply_markup=get_main_menu())

        if user.clean_chat:
            await clean_chat(query.bot, query.message.chat.id, reply.message_id)
    elif data == 'edit':
        await IncomeStates.edit.set()
        await query.message.edit_text("‚úèÔ∏è –ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=get_edit_keyboard())
    elif data == 'back':
        await IncomeStates.category.set()
        categories = await get_categories(user, 'income')
        await query.message.edit_text("üè∑Ô∏è –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_keyboard(categories, type='income'))


async def income_edit_callback(query: types.CallbackQuery, state: FSMContext):
    data = query.data
    if data == 'edit_sum':
        await IncomeStates.sum.set()
        await query.message.delete()
        await query.message.answer("‚ú® –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:", reply_markup=get_back_keyboard())
    elif data == 'edit_category':
        await IncomeStates.category.set()
        user = await get_or_create_user(query.from_user.id, query.from_user.full_name)
        categories = await get_categories(user, 'income')
        await query.message.edit_text("üè∑Ô∏è –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_keyboard(categories, type='income'))
    elif data == 'back':
        await IncomeStates.confirm.set()
        state_data = await state.get_data()
        category_name = state_data.get('category_name', '‚Äî')
        await query.message.edit_text(
            f"‚ú® –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–º –¥–æ—Ö–æ–¥?\n"
            f"üíµ –°—É–º–º–∞: {state_data['amount']:.2f}\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}",
            reply_markup=get_confirmation_keyboard(is_expense=False)
        )


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_income, lambda m: m.text == INCOME_BUTTON, state="*")
    dp.register_message_handler(income_sum, state=IncomeStates.sum)
    dp.register_callback_query_handler(income_category_callback, state=IncomeStates.category)
    dp.register_message_handler(income_create_category, state=IncomeStates.category, content_types=['text'])
    dp.register_callback_query_handler(income_confirm_callback, state=IncomeStates.confirm)
    dp.register_callback_query_handler(income_edit_callback, state=IncomeStates.edit)
